# Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

AWSTemplateFormatVersion: '2010-09-09'
Description: Creates SDLC Account using Control Tower and deploys IAM Roles / KMS / S3 Buckets for an Application
  Deployment Orastrator to use.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "SDLC Account Information"
        Parameters:
          - pAccountNamePrefix
          - pSSOUserFirstName
          - pSSOUserLastName
          - pSSOUserEmail
          - pDevAccountEmail
          - pTestAccountEmail
          - pProdAccountEmail
          - pDeplAccountEmail

    ParameterLabels:
      pAccountNamePrefix:
        default: "Account Name Prefix"
      pSSOUserFirstName:
        default: "SSO Users First Name"
      pSSOUserLastName:
        default: "SSO Users Last Name"
      pSSOUserEmail:
        default: "SSO Users Email Address"
      pDevAccountEmail:
        default: "Development Account Root Email"
      pTestAccountEmail:
        default: "Test Account Root Email"
      pProdAccountEmail:
        default: "Production Account Root Email"
      pDeplAccountEmail:
        default: "Deployment Account Root Email"

Parameters:
  pAccountNamePrefix:
    Type: String
    Default: 'ent-ct-team'
  pSSOUserFirstName:
   Type: String
  pSSOUserLastName:
    Type: String
  pSSOUserEmail:
    Type: String
  # Account Root Email Addresses
  pDevAccountEmail:
    Type: String
  pTestAccountEmail:
    Type: String
  pProdAccountEmail:
    Type: String
  pDeplAccountEmail:
    Type: String

Resources:
  rCreateDevAccount:
    Type: Custom::InvokeCreateAccountFn
    DependsOn: rCreateProdAccount
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:CTE_InvokeCreateAccountFn
      CreateAccountSfn: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:CTE_SDLC_Integration
      ServiceCatalogParameters:
        AccountName: !Sub ${pAccountNamePrefix}-dev
        AccountEmail: !Ref pDevAccountEmail
        SSOUserFirstName: !Ref pSSOUserFirstName
        SSOUserLastName: !Ref pSSOUserLastName
        SSOUserEmail: !Ref pSSOUserEmail
        ManagedOrganizationalUnit: Workloads:ent:Dev

  rCreateTestAccount:
    Type: Custom::InvokeCreateAccountFn
    DependsOn: rCreateProdAccount
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:CTE_InvokeCreateAccountFn
      CreateAccountSfn: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:CTE_SDLC_Integration
      ServiceCatalogParameters:
        AccountName: !Sub ${pAccountNamePrefix}-test
        AccountEmail: !Ref pTestAccountEmail
        SSOUserFirstName: !Ref pSSOUserFirstName
        SSOUserLastName: !Ref pSSOUserLastName
        SSOUserEmail: !Ref pSSOUserEmail
        ManagedOrganizationalUnit: Workloads:ent:Test

  rCreateProdAccount:
    Type: Custom::InvokeCreateAccountFn
    DependsOn: rCreateDeplAccount
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:CTE_InvokeCreateAccountFn
      CreateAccountSfn: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:CTE_SDLC_Integration
      ServiceCatalogParameters:
        AccountName: !Sub ${pAccountNamePrefix}-prod
        AccountEmail: !Ref pProdAccountEmail
        SSOUserFirstName: !Ref pSSOUserFirstName
        SSOUserLastName: !Ref pSSOUserLastName
        SSOUserEmail: !Ref pSSOUserEmail
        ManagedOrganizationalUnit: Workloads:ent:Prod

  rCreateDeplAccount:
    Type: Custom::InvokeCreateAccountFn
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:CTE_InvokeCreateAccountFn
      CreateAccountSfn: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:CTE_SDLC_Integration
      ServiceCatalogParameters:
        AccountName: !Sub ${pAccountNamePrefix}-depl
        AccountEmail: !Ref pDeplAccountEmail
        SSOUserFirstName: !Ref pSSOUserFirstName
        SSOUserLastName: !Ref pSSOUserLastName
        SSOUserEmail: !Ref pSSOUserEmail
        ManagedOrganizationalUnit: Workloads:ent:Deploy

  # ------
  # IAM
  # ------
  rDevOrchestrationRoles:
    Type: Custom::CTE_CrossAccountCloudFormation
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:CTE_CrossAccountCloudFormation
      Parameters:
        Configuration:
          RoleArn: !Sub arn:aws:iam::${rCreateDevAccount.AccountId}:role/AWSControlTowerExecution
          Capabilities: CAPABILITY_NAMED_IAM
          StackName: Orchestration-IAM-Roles
          Description: IAM Roles for the Deployment environment to setup an SDLC Account Stack
          #TerminationProtection: true
          Resources:
            rOrganizationActionRole:
              Type: AWS::IAM::Role
              Properties:
                RoleName: Orchestration-Action
                Path: "/"
                AssumeRolePolicyDocument:
                  Version: 2012-10-17
                  Statement:
                    - Effect: Allow
                      Principal:
                        AWS:
                          - !Sub arn:aws:iam::${rCreateDeplAccount.AccountId}:role/Orchestration-Service
                        Service:
                          - cloudformation.amazonaws.com
                          - lambda.amazonaws.com
                          - servicecatalog.amazonaws.com
                          - codebuild.amazonaws.com
                      Action:
                        - sts:AssumeRole
                ManagedPolicyArns:
                  - arn:aws:iam::aws:policy/AdministratorAccess
          Outputs:
            oOrganizationActionRoleArn:
              Value: {"&Fn::GetAtt": ["rOrganizationActionRole", "Arn"]}

  rTestOrchestrationRoles:
    Type: Custom::CTE_CrossAccountCloudFormation
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:CTE_CrossAccountCloudFormation
      Parameters:
        Configuration:
          RoleArn: !Sub arn:aws:iam::${rCreateTestAccount.AccountId}:role/AWSControlTowerExecution
          Capabilities: CAPABILITY_NAMED_IAM
          StackName: Orchestration-IAM-Roles
          Description: IAM Roles for the Deployment environment to setup an SDLC Account Stack
          #TerminationProtection: true
          Resources:
            rOrganizationActionRole:
              Type: AWS::IAM::Role
              Properties:
                RoleName: Orchestration-Action
                Path: "/"
                AssumeRolePolicyDocument:
                  Version: 2012-10-17
                  Statement:
                    - Effect: Allow
                      Principal:
                        AWS:
                          - !Sub arn:aws:iam::${rCreateDeplAccount.AccountId}:role/Orchestration-Service
                        Service:
                          - cloudformation.amazonaws.com
                          - lambda.amazonaws.com
                          - servicecatalog.amazonaws.com
                          - codebuild.amazonaws.com
                      Action:
                        - sts:AssumeRole
                ManagedPolicyArns:
                  - arn:aws:iam::aws:policy/AdministratorAccess
          Outputs:
            oOrganizationActionRoleArn:
              Value: {"&Fn::GetAtt": ["rOrganizationActionRole", "Arn"]}

  rProdOrchestrationRoles:
    Type: Custom::CTE_CrossAccountCloudFormation
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:CTE_CrossAccountCloudFormation
      Parameters:
        Configuration:
          RoleArn: !Sub arn:aws:iam::${rCreateProdAccount.AccountId}:role/AWSControlTowerExecution
          Capabilities: CAPABILITY_NAMED_IAM
          StackName: Orchestration-IAM-Roles
          Description: IAM Roles for the Deployment environment to setup an SDLC Account Stack
          #TerminationProtection: true
          Resources:
            rOrganizationActionRole:
              Type: AWS::IAM::Role
              Properties:
                RoleName: Orchestration-Action
                Path: "/"
                AssumeRolePolicyDocument:
                  Version: 2012-10-17
                  Statement:
                    - Effect: Allow
                      Principal:
                        AWS:
                          - !Sub arn:aws:iam::${rCreateDeplAccount.AccountId}:role/Orchestration-Service
                        Service:
                          - cloudformation.amazonaws.com
                          - lambda.amazonaws.com
                          - servicecatalog.amazonaws.com
                          - codebuild.amazonaws.com
                      Action:
                        - sts:AssumeRole
                ManagedPolicyArns:
                  - arn:aws:iam::aws:policy/AdministratorAccess
          Outputs:
            oOrganizationActionRoleArn:
              Value: {"&Fn::GetAtt": ["rOrganizationActionRole", "Arn"]}

  rDeplOrchestrationRoles:
    Type: Custom::CTE_CrossAccountCloudFormation
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:CTE_CrossAccountCloudFormation
      Parameters:
        Configuration:
          RoleArn: !Sub arn:aws:iam::${rCreateDeplAccount.AccountId}:role/AWSControlTowerExecution
          Capabilities: CAPABILITY_NAMED_IAM
          StackName: Orchestration-IAM-Roles
          Description: IAM Roles for the Deployment environment to setup an SDLC Account Stack
          #TerminationProtection: true
          Resources:
            rOrganizationServiceRole:
              Type: AWS::IAM::Role
              Properties:
                RoleName: Orchestration-Service
                AssumeRolePolicyDocument:
                  Version: "2012-10-17"
                  Statement:
                    - Effect: Allow
                      Principal:
                        Service:
                          - codepipeline.amazonaws.com
                          - events.amazonaws.com
                        AWS:
                          - !Sub arn:aws:iam::${rCreateDeplAccount.AccountId}:root
                      Action:
                        - sts:AssumeRole
                Path: "/"
                ManagedPolicyArns:
                  - arn:aws:iam::aws:policy/AWSCodePipeline_FullAccess
            rOrganizationActionRole:
              DependsOn: rOrganizationServiceRole
              Type: AWS::IAM::Role
              Properties:
                RoleName: Orchestration-Action
                Path: "/"
                AssumeRolePolicyDocument:
                  Version: 2012-10-17
                  Statement:
                    - Effect: Allow
                      Principal:
                        AWS:
                          - !Sub arn:aws:iam::${rCreateDeplAccount.AccountId}:role/Orchestration-Service
                        Service:
                          - cloudformation.amazonaws.com
                          - lambda.amazonaws.com
                          - servicecatalog.amazonaws.com
                          - codebuild.amazonaws.com
                      Action:
                        - sts:AssumeRole
                ManagedPolicyArns:
                  - arn:aws:iam::aws:policy/AdministratorAccess
          Outputs:
            oOrganizationServiceRoleArn:
              Value: { "&Fn::GetAtt": [ "rOrganizationServiceRole", "Arn" ] }
            oOrganizationActionRoleArn:
              Value: {"&Fn::GetAtt": ["rOrganizationActionRole", "Arn"]}

  rOrchestrationResources:
    Type: Custom::CTE_CrossAccountCloudFormation
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:CTE_CrossAccountCloudFormation
      Parameters:
        Configuration:
          RoleArn: !Sub arn:aws:iam::${rCreateDeplAccount.AccountId}:role/AWSControlTowerExecution
          Capabilities: CAPABILITY_NAMED_IAM
          StackName: Orchestration-Resources
          Description: AWS Resources need for the Deployment environment to setup an SDLC Account Stack
          #TerminationProtection: true
          Resources:
            # KMS Key
            rOrchestrationKmsKey:
              Type: AWS::KMS::Key
              Properties:
                Description: Used by Orchestration Assumed Roles in SDLC Accounts to Encrypt/Decrypt code
                EnableKeyRotation: true
                KeyPolicy:
                  Version: '2012-10-17'
                  Id: {"&Ref": "AWS::StackName"}
                  Statement:
                    - Sid: Allow access for Key Administrators
                      Effect: Allow
                      Principal:
                        AWS:
                          - {"&Fn::Sub": "arn:aws:iam::${AWS::AccountId}:root"}
                          - {"&Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/AWSControlTowerExecution"}
                          - !GetAtt rDeplOrchestrationRoles.oOrganizationActionRoleArn
                      Action:
                        - kms:*
                      Resource: "*"
                    - Sid: Allow use of the key
                      Effect: Allow
                      Principal:
                        AWS:
                          - !GetAtt rDevOrchestrationRoles.oOrganizationActionRoleArn
                          - !GetAtt rTestOrchestrationRoles.oOrganizationActionRoleArn
                          - !GetAtt rProdOrchestrationRoles.oOrganizationActionRoleArn
                      Action:
                        - kms:Encrypt
                        - kms:Decrypt
                        - kms:ReEncrypt*
                        - kms:GenerateDataKey*
                        - kms:DescribeKey
                      Resource: "*"
            rOrchestrationKmsKeyKMSAlias:
              Type: AWS::KMS::Alias
              Properties:
                AliasName: {"&Fn::Sub": "alias/orchestration-${AWS::Region}"}
                TargetKeyId: {"&Ref": "rOrchestrationKmsKey"}
            # S3
            rOrchestrationArtifactBucket:
              Type: AWS::S3::Bucket
              Properties:
                BucketName: {"&Fn::Sub": "orchestration-${AWS::AccountId}-${AWS::Region}"}
                AccessControl: BucketOwnerFullControl
                PublicAccessBlockConfiguration:
                  BlockPublicAcls: true
                  BlockPublicPolicy: true
                  IgnorePublicAcls: true
                  RestrictPublicBuckets: true
                BucketEncryption:
                  ServerSideEncryptionConfiguration:
                    - ServerSideEncryptionByDefault:
                        KMSMasterKeyID: {"&Ref": "rOrchestrationKmsKey"}
                        SSEAlgorithm: aws:kms
                VersioningConfiguration:
                  Status: Enabled
            rOrchestrationArtifactBucketPolicy:
              Type: AWS::S3::BucketPolicy
              Properties:
                Bucket: {"&Ref": "rOrchestrationArtifactBucket"}
                PolicyDocument:
                  Statement:
                    - Sid: DenyUnEncryptedObjectUploads
                      Effect: Deny
                      Principal: '*'
                      Action: s3:PutObject
                      Resource: {"&Fn::Sub": "${rOrchestrationArtifactBucket.Arn}/*"}
                      Condition:
                        StringNotEquals:
                          s3:x-amz-server-side-encryption: aws:kms
                    - Sid: DenyInsecureConnections
                      Effect: Deny
                      Principal: '*'
                      Action: s3:*
                      Resource: {"&Fn::Sub": "${rOrchestrationArtifactBucket.Arn}/*"}
                      Condition:
                        Bool:
                          aws:SecureTransport: 'false'
                    - Sid: DisableSigV2
                      Effect: Deny
                      Principal: '*'
                      Action: s3:*
                      Resource:
                        - {"&Fn::Sub": "${rOrchestrationArtifactBucket.Arn}/*"}
                        - {"&Fn::Sub": "${rOrchestrationArtifactBucket.Arn}"}
                      Condition:
                        StringEquals:
                          s3:signatureversion: AWS
                    - Sid: AccessToBucket
                      Action:
                        - s3:*
                      Effect: Allow
                      Resource:
                        - {"&Fn::Sub": "${rOrchestrationArtifactBucket.Arn}"}
                        - {"&Fn::Sub": "${rOrchestrationArtifactBucket.Arn}/*"}
                      Principal:
                        AWS:
                          - !GetAtt rDevOrchestrationRoles.oOrganizationActionRoleArn
                          - !GetAtt rTestOrchestrationRoles.oOrganizationActionRoleArn
                          - !GetAtt rProdOrchestrationRoles.oOrganizationActionRoleArn
                          - !GetAtt rDeplOrchestrationRoles.oOrganizationActionRoleArn
          Outputs:
            oOrchestrationKmsKeyArn:
              Value: {"&Fn::GetAtt": "rOrchestrationKmsKey.Arn"}
            oOrchestrationArtifactBucket:
              Value: {"&Ref": "rOrchestrationArtifactBucket"}

  rOrchestrationExample:
    Type: Custom::CTE_CrossAccountCloudFormation
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:CTE_CrossAccountCloudFormation
      Parameters:
        Configuration:
          RoleArn: !Sub arn:aws:iam::${rCreateDeplAccount.AccountId}:role/AWSControlTowerExecution
          Capabilities: CAPABILITY_NAMED_IAM
          StackName: SDLC-Orchestration-Example
          Description: AWS Resources need for the Deployment environment to setup an SDLC Account Stack
          Resources:
            rCodePipeline:
              Type: AWS::CodePipeline::Pipeline
              Properties:
                RestartExecutionOnUpdate: True
                ArtifactStores:
                  - Region: !Ref AWS::Region
                    ArtifactStore:
                      EncryptionKey:
                        Id: !GetAtt rOrchestrationResources.oOrchestrationKmsKeyArn
                        Type: KMS
                      Location: !GetAtt rOrchestrationResources.oOrchestrationArtifactBucket
                      Type: S3
                Name: SDLC-Sample-Pipeline
                RoleArn: !GetAtt rDeplOrchestrationRoles.oOrganizationServiceRoleArn
                Stages:
                  - Name: Source
                    Actions:
                      - Name: TemplateSource
                        ActionTypeId:
                          Category: Source
                          Owner: AWS
                          Provider: CodeCommit
                          Version: "1"
                        Configuration:
                          BranchName: master
                          RepositoryName: SDLC-Sample
                        OutputArtifacts:
                          - Name: Source
                        RunOrder: 1
                  - Name: Developement
                    Actions:
                      - Name: Deploy-Infrastructure
                        ActionTypeId:
                          Category: Deploy
                          Owner: AWS
                          Provider: CloudFormation
                          Version: "1"
                        Configuration:
                          ActionMode: CREATE_UPDATE
                          RoleArn: !GetAtt rDevOrchestrationRoles.oOrganizationActionRoleArn
                          StackName: SDLC-Sample-Inf
                          TemplatePath: !Sub Build::${pProduct}.yaml
                          Capabilities: CAPABILITY_NAMED_IAM
                        InputArtifacts:
                          - Name: Source
                        RoleArn: !GetAtt rDevOrchestrationRoles.oOrganizationActionRoleArn
                        RunOrder: 1
                  - Name: Test
                    Actions:
                      - Name: Deploy-Infrastructure
                        ActionTypeId:
                          Category: Deploy
                          Owner: AWS
                          Provider: CloudFormation
                          Version: "1"
                        Configuration:
                          ActionMode: CREATE_UPDATE
                          RoleArn: !GetAtt rTestOrchestrationRoles.oOrganizationActionRoleArn
                          StackName: SDLC-Sample-Inf
                          TemplatePath: !Sub Build::${pProduct}.yaml
                          Capabilities: CAPABILITY_NAMED_IAM
                        InputArtifacts:
                          - Name: Source
                        RoleArn: GetAtt rTestOrchestrationRoles.oOrganizationActionRoleArn
                        RunOrder: 1
                  - Name: Production
                    Actions:
                      - Name: Deploy-Infrastructure
                        ActionTypeId:
                          Category: Deploy
                          Owner: AWS
                          Provider: CloudFormation
                          Version: "1"
                        Configuration:
                          ActionMode: CREATE_UPDATE
                          RoleArn: GetAtt rProdOrchestrationRoles.oOrganizationActionRoleArn
                          StackName: SDLC-Sample-Inf
                          TemplatePath: !Sub Build::${pProduct}.yaml
                          Capabilities: CAPABILITY_NAMED_IAM
                        InputArtifacts:
                          - Name: Source
                        RoleArn: GetAtt rProdOrchestrationRoles.oOrganizationActionRoleArn
                        RunOrder: 1

Outputs:
  oOrchestrationArtifactBucket:
    Value: !GetAtt rOrchestrationResources.oOrchestrationArtifactBucket
